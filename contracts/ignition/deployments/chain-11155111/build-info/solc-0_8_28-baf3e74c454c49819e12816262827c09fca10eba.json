{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-baf3e74c454c49819e12816262827c09fca10eba",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/SimpleFraudOracle.sol": "project/contracts/SimpleFraudOracle.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/SimpleFraudOracle.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title SimpleFraudOracle\n * @dev Lightweight fraud detection oracle for SafeSend escrow system\n * Performs basic checks: blacklist, amount limits, and manual flagging\n */\ncontract SimpleFraudOracle is Ownable {\n    \n    // Simple fraud rules\n    uint256 public maxTransactionAmount = 5000 * 10**6; // 5000 PYUSD (6 decimals)\n    uint256 public disputeWindowSeconds = 7 days;\n    \n    // Blacklisted addresses\n    mapping(address => bool) public blacklistedAddresses;\n    \n    // Manually flagged escrows\n    mapping(uint256 => bool) public flaggedEscrows;\n    mapping(uint256 => string) public flagReasons;\n    \n    // Escrow creation timestamps for dispute window\n    mapping(uint256 => uint256) public escrowCreationTime;\n    \n    // Events\n    event EscrowFlagged(uint256 indexed escrowId, address indexed flaggedAddress, string reason);\n    event EscrowCleared(uint256 indexed escrowId);\n    event AddressBlacklisted(address indexed addr, string reason);\n    event AddressWhitelisted(address indexed addr);\n    event MaxAmountUpdated(uint256 newMaxAmount);\n    event DisputeWindowUpdated(uint256 newWindowSeconds);\n    \n    constructor() Ownable(msg.sender) {}\n    \n    /**\n     * @dev Check if an escrow should be flagged for fraud\n     * @return isFlagged Whether the escrow is flagged\n     * @return reason Reason for flagging (empty if not flagged)\n     */\n    function checkEscrow(\n        uint256 escrowId,\n        address buyer,\n        address seller,\n        uint256 amount\n    ) external returns (bool isFlagged, string memory reason) {\n        // Record creation time\n        if (escrowCreationTime[escrowId] == 0) {\n            escrowCreationTime[escrowId] = block.timestamp;\n        }\n        \n        // Check 1: Blacklist\n        if (blacklistedAddresses[buyer]) {\n            flaggedEscrows[escrowId] = true;\n            flagReasons[escrowId] = \"Buyer address is blacklisted\";\n            emit EscrowFlagged(escrowId, buyer, flagReasons[escrowId]);\n            return (true, flagReasons[escrowId]);\n        }\n        \n        if (blacklistedAddresses[seller]) {\n            flaggedEscrows[escrowId] = true;\n            flagReasons[escrowId] = \"Seller address is blacklisted\";\n            emit EscrowFlagged(escrowId, seller, flagReasons[escrowId]);\n            return (true, flagReasons[escrowId]);\n        }\n        \n        // Check 2: Amount limit\n        if (amount > maxTransactionAmount) {\n            flaggedEscrows[escrowId] = true;\n            flagReasons[escrowId] = \"Transaction amount exceeds maximum limit\";\n            emit EscrowFlagged(escrowId, buyer, flagReasons[escrowId]);\n            return (true, flagReasons[escrowId]);\n        }\n        \n        // Check 3: Same address\n        if (buyer == seller) {\n            flaggedEscrows[escrowId] = true;\n            flagReasons[escrowId] = \"Buyer and seller cannot be the same address\";\n            emit EscrowFlagged(escrowId, buyer, flagReasons[escrowId]);\n            return (true, flagReasons[escrowId]);\n        }\n        \n        // Check 4: Manual flag\n        if (flaggedEscrows[escrowId]) {\n            return (true, flagReasons[escrowId]);\n        }\n        \n        return (false, \"\");\n    }\n    \n    /**\n     * @dev Check if an escrow is flagged\n     */\n    function isEscrowFlagged(uint256 escrowId) external view returns (bool, string memory) {\n        return (flaggedEscrows[escrowId], flagReasons[escrowId]);\n    }\n    \n    /**\n     * @dev Check if still within dispute window\n     */\n    function isWithinDisputeWindow(uint256 escrowId) external view returns (bool) {\n        uint256 creationTime = escrowCreationTime[escrowId];\n        if (creationTime == 0) return false;\n        return block.timestamp <= creationTime + disputeWindowSeconds;\n    }\n    \n    /**\n     * @dev Manually flag an escrow (owner only)\n     */\n    function flagEscrow(\n        uint256 escrowId,\n        address flaggedAddress,\n        string memory reason\n    ) external onlyOwner {\n        flaggedEscrows[escrowId] = true;\n        flagReasons[escrowId] = reason;\n        emit EscrowFlagged(escrowId, flaggedAddress, reason);\n    }\n    \n    /**\n     * @dev Clear a fraud flag (owner only)\n     */\n    function clearFlag(uint256 escrowId) external onlyOwner {\n        flaggedEscrows[escrowId] = false;\n        delete flagReasons[escrowId];\n        emit EscrowCleared(escrowId);\n    }\n    \n    /**\n     * @dev Blacklist an address (owner only)\n     */\n    function blacklistAddress(address addr, string memory reason) external onlyOwner {\n        blacklistedAddresses[addr] = true;\n        emit AddressBlacklisted(addr, reason);\n    }\n    \n    /**\n     * @dev Remove address from blacklist (owner only)\n     */\n    function whitelistAddress(address addr) external onlyOwner {\n        blacklistedAddresses[addr] = false;\n        emit AddressWhitelisted(addr);\n    }\n    \n    /**\n     * @dev Update max transaction amount (owner only)\n     */\n    function setMaxTransactionAmount(uint256 newMaxAmount) external onlyOwner {\n        maxTransactionAmount = newMaxAmount;\n        emit MaxAmountUpdated(newMaxAmount);\n    }\n    \n    /**\n     * @dev Update dispute window (owner only)\n     */\n    function setDisputeWindow(uint256 newWindowSeconds) external onlyOwner {\n        disputeWindowSeconds = newWindowSeconds;\n        emit DisputeWindowUpdated(newWindowSeconds);\n    }\n}\n"
      }
    }
  }
}