{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-f849cd3f49c20aef4e0e8abd20539a5ffb63a90a",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/SafeSendContract.sol": "project/contracts/SafeSendContract.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/IFraudOracle.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title IFraudOracle\n * @dev Interface for fraud detection oracles used by SafeSendContract\n */\ninterface IFraudOracle {\n    /**\n     * @dev Check if an escrow transaction should be flagged for fraud\n     * @param escrowId Unique identifier for the escrow\n     * @param buyer Address of the buyer\n     * @param seller Address of the seller\n     * @param amount Amount being escrowed (in token's smallest unit)\n     * @return isFlagged Whether the escrow is flagged as fraudulent\n     * @return reason Reason for flagging (empty string if not flagged)\n     */\n    function checkEscrow(\n        uint256 escrowId,\n        address buyer,\n        address seller,\n        uint256 amount\n    ) external returns (bool isFlagged, string memory reason);\n    \n    /**\n     * @dev Check if an escrow is currently flagged (view function)\n     * @param escrowId Unique identifier for the escrow\n     * @return isFlagged Whether the escrow is flagged\n     * @return reason Reason for flagging\n     */\n    function isEscrowFlagged(uint256 escrowId) \n        external \n        view \n        returns (bool isFlagged, string memory reason);\n}\n"
      },
      "project/contracts/SafeSendContract.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./IFraudOracle.sol\";\n\n/**\n * @title SafeSendContract\n * @dev PYUSD Escrow contract with fraud protection and oracle-based attestations\n * Brings PayPal-like consumer protection to on-chain stablecoin payments\n */\ncontract SafeSendContract is Ownable, ReentrancyGuard {\n    IERC20 public immutable pyusdToken;\n    address public fraudOracle;\n    \n    uint256 public escrowCounter = 10000; // Start IDs at 10000 for better UX.\n    \n    enum EscrowStatus {\n        Active,\n        Released,\n        Refunded,\n        FraudFlagged\n    }\n    \n    struct Escrow {\n        uint256 id;\n        address buyer;\n        address seller;\n        uint256 amount;\n        string description;\n        EscrowStatus status;\n        uint256 createdAt;\n        bool fraudFlagged;\n    }\n    \n    mapping(uint256 => Escrow) public escrows;\n    mapping(address => uint256[]) public buyerEscrows;\n    mapping(address => uint256[]) public sellerEscrows;\n    \n    // Events for transparency and auditability\n    event Deposited(\n        uint256 indexed escrowId,\n        address indexed buyer,\n        address indexed seller,\n        uint256 amount,\n        string description\n    );\n    \n    event Released(\n        uint256 indexed escrowId,\n        address indexed buyer,\n        address indexed seller,\n        uint256 amount\n    );\n    \n    event Refunded(\n        uint256 indexed escrowId,\n        address indexed buyer,\n        uint256 amount\n    );\n    \n    event FraudFlagged(\n        uint256 indexed escrowId,\n        address indexed flaggedBy\n    );\n    \n    event OracleUpdated(\n        address indexed oldOracle,\n        address indexed newOracle\n    );\n    \n    modifier onlyFraudOracle() {\n        require(fraudOracle != address(0), \"No fraud oracle configured\");\n        require(msg.sender == fraudOracle, \"Only fraud oracle can call this\");\n        _;\n    }\n    \n    modifier escrowExists(uint256 escrowId) {\n        require(escrows[escrowId].buyer != address(0), \"Escrow does not exist\");\n        _;\n    }\n    \n    modifier onlyBuyer(uint256 escrowId) {\n        require(msg.sender == escrows[escrowId].buyer, \"Only buyer can call this\");\n        _;\n    }\n    \n    modifier onlySeller(uint256 escrowId) {\n        require(msg.sender == escrows[escrowId].seller, \"Only seller can call this\");\n        _;\n    }\n    \n    constructor(address _pyusdToken, address _fraudOracle) Ownable(msg.sender) {\n        require(_pyusdToken != address(0), \"Invalid PYUSD token address\");\n        require(_fraudOracle != address(0), \"Fraud oracle address required\");\n        \n        pyusdToken = IERC20(_pyusdToken);\n        fraudOracle = _fraudOracle;\n    }\n    \n    /**\n     * @dev Deposit PYUSD into escrow for a specific seller\n     * @param seller Address of the seller\n     * @param amount Amount of PYUSD to escrow\n     * @param description Description of the transaction\n     */\n    function deposit(\n        address seller,\n        uint256 amount,\n        string memory description\n    ) external nonReentrant returns (uint256) {\n        require(seller != address(0), \"Invalid seller address\");\n        require(seller != msg.sender, \"Buyer cannot be seller\");\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(bytes(description).length > 0, \"Description cannot be empty\");\n        \n        // Transfer PYUSD from buyer to contract\n        require(\n            pyusdToken.transferFrom(msg.sender, address(this), amount),\n            \"PYUSD transfer failed\"\n        );\n        \n        escrowCounter++;\n        uint256 escrowId = escrowCounter;\n        \n        // Create escrow\n        escrows[escrowId] = Escrow({\n            id: escrowId,\n            buyer: msg.sender,\n            seller: seller,\n            amount: amount,\n            description: description,\n            status: EscrowStatus.Active,\n            createdAt: block.timestamp,\n            fraudFlagged: false\n        });\n        \n        buyerEscrows[msg.sender].push(escrowId);\n        sellerEscrows[seller].push(escrowId);\n        \n        emit Deposited(escrowId, msg.sender, seller, amount, description);\n        \n        // Check fraud oracle if configured\n        if (fraudOracle != address(0)) {\n            try IFraudOracle(fraudOracle).checkEscrow(\n                escrowId,\n                msg.sender,\n                seller,\n                amount\n            ) returns (bool isFlagged, string memory reason) {\n                if (isFlagged) {\n                    // Mark escrow as fraud flagged\n                    escrows[escrowId].fraudFlagged = true;\n                    escrows[escrowId].status = EscrowStatus.FraudFlagged;\n                    \n                    emit FraudFlagged(escrowId, fraudOracle);\n                    \n                    // Automatically refund the buyer\n                    require(\n                        pyusdToken.transfer(msg.sender, amount),\n                        \"PYUSD refund transfer failed\"\n                    );\n                    \n                    escrows[escrowId].status = EscrowStatus.Refunded;\n                    emit Refunded(escrowId, msg.sender, amount);\n                    \n                    // Revert with fraud reason\n                    revert(string(abi.encodePacked(\"Fraud detected: \", reason)));\n                }\n            } catch {\n                // Oracle call failed - continue with escrow creation\n                // This ensures the contract doesn't break if oracle is down\n            }\n        }\n        \n        return escrowId;\n    }\n    \n    /**\n     * @dev Release funds to seller (normal transaction completion)\n     * @param escrowId ID of the escrow to release\n     */\n    function release(uint256 escrowId) \n        external \n        escrowExists(escrowId) \n        onlyBuyer(escrowId) \n        nonReentrant \n    {\n        Escrow storage escrow = escrows[escrowId];\n        require(escrow.status == EscrowStatus.Active, \"Escrow is not active\");\n        require(!escrow.fraudFlagged, \"Cannot release flagged escrow\");\n        \n        escrow.status = EscrowStatus.Released;\n        \n        require(\n            pyusdToken.transfer(escrow.seller, escrow.amount),\n            \"PYUSD transfer to seller failed\"\n        );\n        \n        emit Released(escrowId, escrow.buyer, escrow.seller, escrow.amount);\n    }\n    \n    /**\n     * @dev Refund funds to buyer (can be called by buyer or automatically via fraud detection)\n     * @param escrowId ID of the escrow to refund\n     */\n    function refund(uint256 escrowId) \n        external \n        escrowExists(escrowId) \n        nonReentrant \n    {\n        Escrow storage escrow = escrows[escrowId];\n        require(escrow.status == EscrowStatus.Active, \"Escrow is not active\");\n        \n        // Only buyer or fraud oracle can initiate refund (if oracle is configured)\n        require(\n            msg.sender == escrow.buyer || \n            (fraudOracle != address(0) && msg.sender == fraudOracle),\n            \"Only buyer or fraud oracle can refund\"\n        );\n        \n        escrow.status = EscrowStatus.Refunded;\n        \n        require(\n            pyusdToken.transfer(escrow.buyer, escrow.amount),\n            \"PYUSD transfer to buyer failed\"\n        );\n        \n        emit Refunded(escrowId, escrow.buyer, escrow.amount);\n    }\n    \n    /**\n     * @dev Mark escrow as fraudulent (oracle attestation)\n     * @param escrowId ID of the escrow to flag\n     */\n    function markFraud(uint256 escrowId) \n        external \n        escrowExists(escrowId) \n        onlyFraudOracle \n    {\n        Escrow storage escrow = escrows[escrowId];\n        require(escrow.status == EscrowStatus.Active, \"Escrow is not active\");\n        \n        escrow.fraudFlagged = true;\n        escrow.status = EscrowStatus.FraudFlagged;\n        \n        emit FraudFlagged(escrowId, msg.sender);\n        \n        // Automatically refund buyer when fraud is flagged\n        require(\n            pyusdToken.transfer(escrow.buyer, escrow.amount),\n            \"PYUSD refund transfer failed\"\n        );\n        \n        escrow.status = EscrowStatus.Refunded;\n        emit Refunded(escrowId, escrow.buyer, escrow.amount);\n    }\n    \n    /**\n     * @dev Update fraud oracle address (only owner)\n     * @param newOracle New fraud oracle address\n     */\n    function updateFraudOracle(address newOracle) external onlyOwner {\n        require(newOracle != address(0), \"Invalid oracle address\");\n        \n        address oldOracle = fraudOracle;\n        fraudOracle = newOracle;\n        \n        emit OracleUpdated(oldOracle, newOracle);\n    }\n    \n    /**\n     * @dev Get escrow details\n     * @param escrowId ID of the escrow\n     */\n    function getEscrow(uint256 escrowId) \n        external \n        view \n        escrowExists(escrowId) \n        returns (Escrow memory) \n    {\n        return escrows[escrowId];\n    }\n    \n    /**\n     * @dev Get buyer's escrow IDs\n     * @param buyer Address of the buyer\n     */\n    function getBuyerEscrows(address buyer) \n        external \n        view \n        returns (uint256[] memory) \n    {\n        return buyerEscrows[buyer];\n    }\n    \n    /**\n     * @dev Get seller's escrow IDs\n     * @param seller Address of the seller\n     */\n    function getSellerEscrows(address seller) \n        external \n        view \n        returns (uint256[] memory) \n    {\n        return sellerEscrows[seller];\n    }\n    \n    /**\n     * @dev Check if fraud oracle is configured\n     */\n    function isFraudOracleConfigured() external view returns (bool) {\n        return fraudOracle != address(0);\n    }\n    \n    /**\n     * @dev Query oracle for escrow fraud status (view function)\n     * @param escrowId ID of the escrow to check\n     */\n    function queryOracleStatus(uint256 escrowId)\n        external\n        view\n        escrowExists(escrowId)\n        returns (bool isFlagged, string memory reason)\n    {\n        if (fraudOracle == address(0)) {\n            return (false, \"No oracle configured\");\n        }\n        \n        return IFraudOracle(fraudOracle).isEscrowFlagged(escrowId);\n    }\n}\n\n"
      }
    }
  }
}